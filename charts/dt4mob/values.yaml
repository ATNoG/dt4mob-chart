imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

tenant: "test-tenant"

hono:
  messagingNetworkTypes:
    - kafka

  kafkaMessagingClusterExample:
    enabled: false

  livenessProbeInitialDelaySeconds: 900
  readinessProbeInitialDelaySeconds: 45

  useDynamicNodePorts: true
  useLoadBalancer: false
  externalAccess:
    enabled: false

  deviceRegistryExample:
    type: mongodb
    addExampleData: false
    mongoDBBasedDeviceRegistry:
      containerRegistry: "atnog-harbor.av.it.pt"
      imageName: "capucho/hono-service-device-registry-mongodb"
      imageTag: "2.7.0-SNAPSHOT"

      deployment:
        annotations:
          reloader.stakater.com/auto: "true"

      extraEnv:
      - name: KEY_STORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "dt4mob-device-registry-kafka-user"
            key: "user.password"
      - name: MONGODB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "dt4mob-mongodb-hono-secret"
            key: "password"

      resources:
        requests:
          cpu: 200m
      mongodb:
        connectionString: "mongodb+srv://${hono.mongodb.username}:${hono.mongodb.password}@${hono.mongodb.host}/${hono.mongodb.dbName}?replicaSet=rs0&ssl=false"
        host: "{{ .Release.Name }}-psmdb-db-rs0.{{ .Release.Namespace }}.svc.cluster.local"
        dbName: hono
        username: hono
        password: ${MONGODB_PASSWORD}

    tlsKeysSecret: "dt4mob-device-registry-cert"
    tlsTrustStoreConfigMap: "none"
    tlsTrustStoreSecret:
      secretName: "dt4mob-device-registry-cert"

    extraVolumes:
    - name: kafka-certs
      secret:
        secretName: "dt4mob-device-registry-kafka-user"
    - name: kafka-trust
      secret:
        secretName: "dt4mob-kafka-cluster-cluster-ca-cert"
    extraVolumeMounts:
    - name: kafka-certs
      mountPath: "/opt/hono/tls/kafka-certs"
      readOnly: true
    - name: kafka-trust
      mountPath: "/opt/hono/tls/kafka-trust"
      readOnly: true

  adapters:
    useExternalAuth: true

    # Despite being in the adapters section, it's shared by all services
    kafkaMessagingSpec:
      commonClientConfig:
        bootstrap.servers: "dt4mob-kafka-cluster-kafka-bootstrap:9092"
        security.protocol: "SSL"
        ssl.truststore.type: "PEM"
        ssl.truststore.location: "/opt/hono/tls/kafka-trust/ca.crt"
        ssl.keystore.type: "PKCS12"
        ssl.keystore.password: ${KEY_STORE_PASSWORD}
        ssl.keystore.location: "/opt/hono/tls/kafka-certs/user.p12"

    mqtt:
      resources:
        requests:
          cpu: 200m

      deployment:
        annotations:
          reloader.stakater.com/auto: "true"

      tlsKeysSecret: "dt4mob-mqtt-adapter-cert"
      tlsTrustStoreConfigMap: "none"
      tlsTrustStoreSecret:
        secretName: "dt4mob-mqtt-adapter-cert"

      extraEnv:
      - name: KEY_STORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "dt4mob-mqtt-adapter-kafka-user"
            key: "user.password"

      extraVolumes:
      - name: kafka-certs
        secret:
          secretName: "dt4mob-mqtt-adapter-kafka-user"
      - name: kafka-trust
        secret:
          secretName: "dt4mob-kafka-cluster-cluster-ca-cert"
      extraVolumeMounts:
      - name: kafka-certs
        mountPath: "/opt/hono/tls/kafka-certs"
        readOnly: true
      - name: kafka-trust
        mountPath: "/opt/hono/tls/kafka-trust"
        readOnly: true
    http:
      resources:
        requests:
          cpu: 200m

      deployment:
        annotations:
          reloader.stakater.com/auto: "true"

      tlsKeysSecret: "dt4mob-http-adapter-cert"
      tlsTrustStoreConfigMap: "none"
      tlsTrustStoreSecret:
        secretName: "dt4mob-http-adapter-cert"

      extraEnv:
      - name: KEY_STORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "dt4mob-http-adapter-kafka-user"
            key: "user.password"

      extraVolumes:
      - name: kafka-certs
        secret:
          secretName: "dt4mob-http-adapter-kafka-user"
      - name: kafka-trust
        secret:
          secretName: "dt4mob-kafka-cluster-cluster-ca-cert"
      extraVolumeMounts:
      - name: kafka-certs
        mountPath: "/opt/hono/tls/kafka-certs"
        readOnly: true
      - name: kafka-trust
        mountPath: "/opt/hono/tls/kafka-trust"
        readOnly: true
    amqp:
      resources:
        requests:
          cpu: 200m

      deployment:
        annotations:
          reloader.stakater.com/auto: "true"

      tlsKeysSecret: "dt4mob-amqp-adapter-cert"
      tlsTrustStoreConfigMap: "none"
      tlsTrustStoreSecret:
        secretName: "dt4mob-amqp-adapter-cert"

      extraEnv:
      - name: KEY_STORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "dt4mob-amqp-adapter-kafka-user"
            key: "user.password"

      extraVolumes:
      - name: kafka-certs
        secret:
          secretName: "dt4mob-amqp-adapter-kafka-user"
      - name: kafka-trust
        secret:
          secretName: "dt4mob-kafka-cluster-cluster-ca-cert"
      extraVolumeMounts:
      - name: kafka-certs
        mountPath: "/opt/hono/tls/kafka-certs"
        readOnly: true
      - name: kafka-trust
        mountPath: "/opt/hono/tls/kafka-trust"
        readOnly: true

  authServer:
    containerRegistry: "atnog-harbor.av.it.pt"
    imageName: "capucho/hono-service-auth"
    imageTag: "2.7.0-SNAPSHOT"

    deployment:
      annotations:
        reloader.stakater.com/auto: "true"

    tlsKeysSecret: "dt4mob-auth-server-cert"
    tlsTrustStoreSecret:
      secretName: "dt4mob-auth-server-cert"

    resources:
      requests:
        cpu: "200m"
        memory: "196Mi"
      limits:
        cpu: "1"
        memory: "256Mi"

    extraVolumes:
      - name: "permissions"
        secret:
          secretName: "dt4mob-permissions"
    extraVolumeMounts:
      - name: "permissions"
        mountPath: "/var/run/hono/auth"
    hono:
      auth:
        svc:
          permissionsPath: "/var/run/hono/auth/permissions.json"
          supportedSaslMechanisms: "EXTERNAL"
          signing:
            # tokenExpiration contains the number of seconds after which tokens issued
            # by the Auth server will expire.
            tokenExpiration: 3600


  commandRouterService:
    containerRegistry: "atnog-harbor.av.it.pt"
    imageName: "capucho/hono-service-command-router-infinispan"
    imageTag: "2.7.0-SNAPSHOT"

    deployment:
      annotations:
        reloader.stakater.com/auto: "true"

    tlsKeysSecret: "dt4mob-command-router-cert"
    tlsTrustStoreConfigMap: "none"
    tlsTrustStoreSecret:
      secretName: "dt4mob-command-router-cert"

    resources:
      limits:
        cpu: "1"
        memory: "800Mi"

    extraEnv:
    - name: KEY_STORE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: "dt4mob-command-router-kafka-user"
          key: "user.password"

    extraVolumes:
    - name: kafka-certs
      secret:
        secretName: "dt4mob-command-router-kafka-user"
    - name: kafka-trust
      secret:
        secretName: "dt4mob-kafka-cluster-cluster-ca-cert"
    extraVolumeMounts:
    - name: kafka-certs
      mountPath: "/opt/hono/tls/kafka-certs"
      readOnly: true
    - name: kafka-trust
      mountPath: "/opt/hono/tls/kafka-trust"
      readOnly: true

ditto:
  connectivity:
    resources:
      cpu: 0.2
      memoryMi: 1024
    image:
      repository: atnog-harbor.av.it.pt/capucho/ditto-connectivity
      tag: 0-SNAPSHOT
      pullPolicy: Always

  gateway:
    resources:
      cpu: 0.2
      memoryMi: 768
    config:
      authentication:
        devops:
          existingSecret: "dt4mob-ditto-gateway-secret"

  policies:
    resources:
      cpu: 0.2
      memoryMi: 768

  things:
    resources:
      cpu: 0.2
      memoryMi: 768

  thingsSearch:
    resources:
      cpu: 0.2
      memoryMi: 768

  dittoui:
    resources:
      cpu: 0.05
      memoryMi: 32

  ingress:
    enabled: true
    className: nginx
    # Use this instead of setting existingSecret because otherwise the secret
    # needs to exist before the chart is rendered.
    api:
      kubernetesAuthAnnotations: |
        nginx.ingress.kubernetes.io/auth-type: basic
        nginx.ingress.kubernetes.io/auth-secret: {{ .Release.Name }}-auth-secret
        nginx.ingress.kubernetes.io/auth-realm: 'Authentication required to use HTTP API!'

  swaggerui:
    resources:
      memoryMi: 64

  nginx:
    service:
      type: ClusterIP
    resources:
      cpu: 0.05
      memoryMi: 32

  mongodb:
    enabled: false

  dbconfig:
    uriSecret: "dt4mob-mongodb-ditto-secret"

controller:
  image:
    repository: atnog-harbor.av.it.pt/capucho/dt4mob-controller
    pullPolicy: Always # IfNotPresent
    tag: "latest"

  serviceAccount:
    create: true
    automount: true
    annotations: {}
    name: ""

  extraVolumes: []
  extraVolumeMounts: []

  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

kafka:
  controller:
    replicas: 3
  broker:
    replicas: 3
  config:
    offsets.topic.replication.factor: 3
    transaction.state.log.replication.factor: 3
    transaction.state.log.min.isr: 2
    default.replication.factor: 3
    min.insync.replicas: 2

psmdb-db:
  replsets:
    rs0:
      size: 3
      volumeSpec:
        pvc:
          storageClassName: "local-path"
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 10Gi
  sharding:
    enabled: false
  users:
  - name: ditto
    db: ditto
    passwordSecretRef:
      name: "dt4mob-mongodb-ditto-secret"
      key: "password"
    roles:
    - name: dbOwner
      db: ditto
  - name: hono
    db: hono
    passwordSecretRef:
      name: "dt4mob-mongodb-hono-secret"
      key: "password"
    roles:
    - name: dbOwner
      db: hono

reloader:
  watchGlobally: false
